# add log system
# isnull for all methods: how to detect and report ?



# check again _::method()

#_________________________________________________________________
# CLASS v1.0 ( 2024.11.11 ) ######################################
#
#	by digi_cs 2024
#
#	PLEASE DOWNLOAD LATEST VERSION FROM: github.com/digics/CLASS
#
#	THIS LIBRARY REQUIRES TWO ADDITIONAL LIBRARIES TO BE INCLUDED:
#
#		uid.lib			github.com/digics/UID10
#
#		arr.lib			github.com/digics/ARR
#
#	funcset:
#
#		_::method
#
#			define method
#
#		_::api
#
#			call method
#
#		_::parent
#
#			call parent method
#
#	- superglobal arrays:
#
#		PARENT[ ptr ]			= pointer class ptr
#
#	   	CLASS[ ptr ]			= name
#
#	   	NAMECLASS[ name ]			= class ptr
#
#		PARENTPTR[ index ]		= class ptr
#
#			this array used by parentptr() function
#			normally it's having only one element:
#
#				PARENTPTR[ "" ]	= base class ptr
#
#					user may upgrade this pointer to implement higher base class
#					as default
#
#	- local arrays:
#
#	   	_PREFIX[ classptr ]		= prefix
#	   	_SUFFIX[ classptr ]		= suffix
#
#		_SRCPTR[ classptr ]		= srcptr
#
#		_PFXSFX[ prefix SEP_ suffix ]	= srcptr
#
#		_PTRLIST[ srcptr ][ ... ]	free ptr list array
#
#		+ UID-GENERATOR at [ srcptr ]
#
#	- special arrays:
#
#		_API[ method ] == first method's parameter number 
#
#			keeps first time defined method's parameter number
#
#			this is for methods that are defined but currently there is no
#			this method for any of defined class
#
#		_APITARGET[ method ] == method target
#
#			the method's target values is shown below:
#
#				p		- method is oriented to work with pointers
#				c		- method is oriented to work with classes
#				cp		- method is oriented to work with classes and pointers
#				""		- method isn't oriented to be called through _::api() function
# 
#		_APITYPE[ method ] == method type
#
#			the type value structure is below:
#
#				D0		== 0		- method isn't supporting single pointer operation
#						   1		- method is supporting single pointer operation
#
#				D2:D1		== 00		- method isn't supporting multi pointer operations
#						   01		- method is supporting multi pointer operations with single pass
#						   10..11	- method is supporting multi pointer operations with multi pass
#
#			once method is defined it's tarhet and type cannot be redefined
#			this is except if method type == 0 - this may be redefined to any type
#			?
#
#		_APITAB[ realfunc ] = realfuncparent
#
#			contains parent functions links
#
#		FUNC::TAB[ func ] = realfunc
#
#		FUNC::PARAM[ methodfunc ] = number of parameters
#
#
#
#		NAMESPACE
#
#	- superglobal vars:
#
#		BASEPTR
#
#		ALLPTR			??? regex to match with any ptr (incl. classes??) ???
#
#		CLASSPTR			??? regex to match with class ptrs???
#
#	- other resources:
#
#		BASE_NAMESPACE
#
#		BASE_PREFIX
#
#		BASE_SUFFIX
#
#		ERROR_OUT
#
#		STDERR
#
#		METHODSEP_
#
#			the content of this var is included between class name and method name
#			while seeking for a method-functions
#
#			METHODSEP_ must start by "::" 
#
#_________________________________________________________________
func	envmod::class( C ) { #######################################

	C[ "ver" ]	= "100"

	C[ "rq" ]	= "uid( 1.01 )	" \
			  "hid( 1.01 )	" \
			  "arr( 1.01 )	" }

@include "D:/CPU/DEV/PROJECT/ENV/awk/mod/class/_/CLASS10/method.inc"

@namespace "class"

BEGIN{

	BASE_NAMESPACE = "class"

	init0() }





#_________________________________________________________________
func	init0(  p,n,px,pp,A ) { ####################################

	if ( ! init0_f ) {

		ERROR_OUT		= _default( ERROR_OUT	, STDERR, "/dev/stderr" )

		librq( "uid", "101" )
		librq( "hid", "101"  )
		librq( "arr", "101"  )

		"" in _APITAB

		SEP_ 			= hid( "SEP_" )
		LAST_			= hid( "LAST_" )

		#_________________

		METHODSEP_		= _default( METHODSEP_	, "::__" )

		BASE_UIDGEN		= _default( BASE_UIDGEN	, "" )

		BASE_PSFX		= _default( BASE_PSFX	, "\x7F|\xC0\xC0\xFF" )

		ALLPTR		= _default( ALLPTR	, "\x7F......\xFF" )

		#_________________

		for ( n in FUNCTAB )

			if ( n in FUNC::TAB ) {

				if ( isnull( FUNC::TAB[ n ] ) )

					delete FUNC::TAB[ n ] }

			else {

				FUNC::TAB[ n ] = n

				match( n, /^(([^:]*)::)?([A-Z_a-z][0-9A-Z_a-z]*)$/, A )

				NAMESPACE[ A[ 2 ] ][ A[ 3 ] ] = "func" }

		#___________

		METHOD_STRICTED[ "class" ]

		METHOD_TARGET[ "ptr" ]		= "p"
		METHOD_TARGET[ "class" ]	= "c"
		METHOD_TARGET[ "classptr" ]	= "cp"

		METHOD_TYPE[ "" ]			= 1 
		METHOD_TYPE[ "+" ]		= 2
		METHOD_TYPE[ "*" ]		= 3
		METHOD_TYPE[ "++" ]		= 4
		METHOD_TYPE[ "**" ]		= 5
		#_________________

		n		= BASE_NAMESPACE
		px		= BASE_PSFX
		pp		= BASE_UIDGEN

		p = defclass( n, px, pp )

		PARENTPTR[ "" ]	= p

		uid::setcnt( _SRCPTR[ p ], _PREFIX[ p ], _SUFFIX[ p ], pp )

		#_________________

		letia( "method", NAMESPACE )

		for ( px in NAMESPACE[ "method" ] ) {

			pp = "method::" px

			_::method( p, px "\t" @pp() ) }

		init0_f = 1 } }

#_________________________________________________________________
func	__class( n, pp, px, D ,p ) { ###############################

	print "DEFINE CLASS: ( " n ", " pp ", " px " )"

	#_______________________
	#
	# base class definition
	#
	#	n		defined class name
	#	pp		parent class ptr
	#	px		psfx
	#_______________________

	if ( n in NAMECLASS )

		return class_err( "class name @1 redefinition!", n )

	#_________________

	p = defclass( n, px, pp )

	_PARENT[ p ]	= pp

	class_inherit( p, pp )

	#_________________

	px = n "::init0"

	if ( px in FUNC::TAB ) {

		px = FUNC::TAB[ px ]

		@px( p ) }

	return p }

	#_______________________

	func	class_inherit( p, pp ,a ) {

		for ( a in _API )

			defapi( p, a, pp ) }

	#____________________________________________
	#############################################

	func	defclass( n, px, pp ,p,sx ) {

		p = uid( BASE_UIDGEN )

		CLASSPTR_		= p

		NAMESPACE_		= n

		px = class_psfx( px, pp ) 

		sx = SFX_

		CLASS[ p ]		= n

		NAMECLASS[ n ]	= p

		_CLASSES[ LAST_ ] = _CLASSES[ _CLASSES[ LAST_ ] ] = p

		_PREFIX[ p ]	= px
		_SUFFIX[ p ]	= sx

		_SRCPTR[ p ]	= class_srcptr( p, px, sx, pp )

		return p }

		#_______________________

		func	class_psfx( t, pp ,h,l,px,P ) {

			if ( t == "" )

				t = ".|."

			if ( h = index( t, "|" ) ) {

				px = class_psfx_0( substr( t, 1, h - 1 ), _PREFIX[ pp ] )

				SFX_ = class_psfx_0( substr( t, h + 1 ), _SUFFIX[ pp ] ) }

			else {

				px = _PREFIX[ pp ]

				if ( length( t ) == 1 )

					t = "." t

				h = class_psfx_0( substr( t, 1, 1 ), substr( _SUFFIX[ pp ], 1, 1 ) )

				l = class_psfx_0( substr( t, 2, 1 ), substr( _SUFFIX[ pp ], 2, 1 ) )

				t = substr( length( t ) > 2 ? t : _SUFFIX[ pp ], 3 )

				t = h l t

				SFX_ = t }

			return px }
			#___________

			func	class_psfx_0( p, pp ) {

				return p == "." ? pp : p }

		#_______________________

		func	class_srcptr( p, px, sx, pp ) {

			p = px SEP_ sx

			if ( p in _PFXSFX )

				return _PFXSFX[ p ]

			p = _PFXSFX[ p ] = uid( BASE_UIDGEN )

			letia( p, _PTRLIST )

			if ( typeof( pp ) != "untyped" )

				uid::setcs( p, px, sx, _SRCPTR[ pp ] )

			return p }

#___________________________________________________________
func	__new( pp, p, p2,p3,p4,p5,p6,p7,p8 ,cp ) { ###########

	# create pointer `p of the class `pp
	#
	#	returns ptr to the newly created ponter
	#
	#	if pp == "" then pp = PARENTPTR[ "" ] (base method)
	#
	#	if pp is not defined class then perform error:
	#
	#		undefined parent class: pp
	#
	#	if p != "" then p will be exact pointer to the created object
	#
	#	if p == "" then p will be generated 
	#_______________________

	print API_ "( " pp ", " p " )"

	if ( p == "" ) {

		cp = _SRCPTR[ pp ]

		if ( "" != p = _PTRLIST[ cp ][ "" ] ) {

			_PTRLIST[ cp ][ "" ] = _PTRLIST[ cp ][ p ]

			delete _PTRLIST[ cp ][ p ] }

		else

			p = uid( cp ) }

	PARENT[ p ] = pp

	return p }

#___________________________________________________________
func	__del( p, p1,p2,p3,p4,p5,p6,p7,p8 ,pp ) { ############

	# delete ptr `p
	#
	#_______________________

	print API_ "( " p " )"

	pp = PARENT[ p ]

	delete PARENT[ p ]

	pp = _SRCPTR[ pp ]

	_PTRLIST[ pp ][ _PTRLIST[ pp ][ "" ] = p ] = _PTRLIST[ pp ][ "" ] }

#___________________________________________________________
func	__dup( p ) { #########################################

	print "DUP: " API_ "' / ptr: " p "'"

	return _::new( PARENT[ p ] ) }

#_________________________________________________________________
func	_::method( p, t ,q,a,tp,tr,A ) { ###########################

	# define new method's parameter set
	#
	#	parameter set will be assigned to the class `p
	#
	#	it is inherited by default
	#
	#
	#		method's number of parameters is determinated by
	#		the ( total number of names in methodstr ) - 1:
	#
	#			"class	name, parentptr, psfx, C"
	#
	#				4 parameters for method 'class'
	#
	#			the number of names should be in range: 1..8
	#
	#			otherwise error produced
	#
	#		method target is determinated by first name in methodstr:
	#
	#			ptr
	#			class
	#			classptr
	#
	#			otherwise method is untargeted
	#
	#		type of method is determinated by (not) presence the following
	#		combination in methodstr:
	#
	#			*	single/multi
	#			+	multi only
	#			**	single/multipass
	#			++	multipass only
	#
	#			otherwise method's type is:
	#
	#				1	if method is targeted
	#				0	if method is untargeted
	#
	#
	#_____________________________

	if ( t == "" ) {

		t = p

		p = CLASSPTR_ }

	else	CLASSPTR_ = p

	print "def method: " p ": " t "'"

	if ( 1 < q = patsplit( t, A, @/[A-Z_a-z][0-9A-Z_a-z]*/ ) ) {

		a = A[ 1 ]

		if ( a in METHOD_STRICTED && init0_f )

			return method_err( "@1: method is stricted to redefinition, @2", a, p )

		defapi( p, a, _PARENT[ p ], q - 1 )

		method_type( p, a, t, A[ 2 ] )

		method_target( p, a,  A[ 2 ] ) }

	else

		if ( q )

			return method_err( "first parameter missed: @1, @2", t, p )

		else

			return method_err( "method name missed: @1, @2", t, p ) }

	#_____________________________

	func	method_type( p, a, t, t2 ) {

		if ( match( t, /\*\*?|\+\+?/ ) ) {

			t = METHOD_TYPE[ substr( t, RSTART, RLENGTH ) ]

			if ( a in _APITYPE ) {

				if ( _APITYPE[ a ] != t )

					return method_err( "@1: method type redefinition from @3 to @4, @2", a, p, _APITYPE[ a ], t ) }

				else
		
					_APITYPE[ a ] = t }

		else	if ( ! ( a in _APITYPE ) )

				_APITYPE[ a ] = t2 in METHOD_TARGET }

	#_____________________________

	func	method_target( p, a, t ) {

		if ( t in METHOD_TARGET ) {

			t = METHOD_TARGET[ t ]

			if ( a in _APITARGET ) {

				if ( _APITARGET[ a ] != t )

					return method_err( "@1: method target redefinition from @3 to @4, @2", a, p, _APITARGET[ a ], t ) }

			else

				_APITARGET[ a ] = t } }

	#_____________________________

	func	method_err( t, a, p, p3,p4 ) {

		if ( p in CLASS )

			p = CLASS[ p ]

		return error( "_::method( " t " )", a, p, p3,p4 ) }

	#____________________________________________
	#############################################

	func	defapi( p, a, pp, q ,c ) {

		# define method `a for class `p with (optional) number of parameters `q
		#
		#	p		- classptr
		#
		#	a		- method name
		#
		#	q		- number of parameters for method `a class `p
		#
		#			if `q == "" then the number of parameters will be inherited from parent
		#_______________________

		if ( a in _API )

			return defapi_0( p, a, pp, q )

		while ( "" != c = _CLASSES[ c ] )

			defapi_0( c, a, pp, q ) }

		#_______________________

		func	defapi_0( p, a, pp, q ,s,ac,ap ) {

			if ( q != "" && ! ( a in _API ) )

				_API[ a ] = q 

			s = METHODSEP_

			ap = pp s a

			ac = CLASS[ p ] s a

			if ( ac in FUNC::TAB ) {

				ac = FUNC::TAB[ ac ]

				if ( ap in FUNC::TAB ) {		

					ap = FUNC::TAB[ ap ]

					if ( ac != ap )

						_APITAB[ ac ] = ap

					if ( q == "" && ap in FUNC::PARAM )

						q = FUNC::PARAM[ ap ] }

				FUNC::TAB[ p s a ] = ac

				if ( q == "" )

					q = _API[ a ]

				if ( q != "" )

					FUNC::PARAM[ ac ] = q }

			else

				if ( ap in FUNC::TAB )

					FUNC::TAB[ p s a ] = FUNC::TAB[ ap ]

				else

					return q == "" ? 0 : _API[ a ] = q }

#___________________________________________________________
############################################################

func	_::api( a, p, p2,p3,p4,p5,p6,p7,p8, r, tr, tp ,x ) {

	# a			- method name
	#
	# p			- ptr/string
	#
	# p2,...,p8		- 7 parameters 2-8
	#
	# r			- split regex
	#
	#			if r == "" then r = ALLPTR
	#
	# tr	p/c/cp	- work with ptr/class/classptr
	#
	#			if tr == "" then tr = _APITARGET[ a ]
	#
	# tp	0/1/2		- single/multi/multpass
	#
	#			if tp == "" then tp = _APITYPE[ a ]
	#
	#_______________________

	x = API_

	r = api_0( a, p, p2,p3,p4,p5,p6,p7,p8, r, tr, tp )

	API_ = x

	return r }
	#_______________________

	func	api_0( a, p, p2,p3,p4,p5,p6,p7,p8, r, tr, tp ,q,i,P,D ) {

		if ( a in _API ) {

			if ( tr == "" )

				tr = _APITARGET[ a ]

			if ( tr == "" )

				return p

			if ( tp == "" )

				tp = _APITYPE[ a ]

			do {	if ( and( tp, 1 ) )

					switch ( tr ) {

						case "cp":

							if ( p in CLASS )

								if ( ( tr = p METHODSEP_ a ) in FUNC::TAB )

									break

								else	return

						case "p":

							if ( p in PARENT )

								if ( ( tr = PARENT[ p ] METHODSEP_ a ) in FUNC::TAB )

									break

								else	return

							continue

						case "c":

							if ( p in CLASS )

								if ( ( tr = p METHODSEP_ a ) in FUNC::TAB )

									break

								else	return

							continue

						default:

							return api_errbat( a, tr ) }

				API_ = FUNC::TAB[ tr ]

				q = FUNC::PARAM[ API_ ]

				if ( q >= 1 && q <=8 )

					if ( q < 5 )

						if ( q < 3 )

							if ( q == 1 )

								return @API_( p )

							else	return @API_( p, p2 )

						else	if ( q == 3 )

								return @API_( p, p2,p3 )

							else	return @API_( p, p2,p3,p4 )

					else	if ( q < 7 )

							if ( q == 5 )

								return @API_( p, p2,p3,p4,p5 )

							else	return @API_( p, p2,p3,p4,p5,p6 )

						else	if ( q == 7 )

								return @API_( p, p2,p3,p4,p5,p6,p7 )

							else	return @API_( p, p2,p3,p4,p5,p6,p7,p8 )

				else

					return api_errbpn( a, q )  } while ( 0 )

			if ( tp >= 2 ) {

				tp = tp < 4 ? 0 : 1

				if ( r == "" )

					r = ALLPTR

				do {	if ( q = patsplit( p, P, r ,D ) )

						switch ( tr ) {

							case "p":

								while ( ++i <= q )

									if ( ( p = P[ i ] ) in PARENT )

										if ( ( i = PARENT[ p ] METHODSEP_ a ) in FUNC::TAB ) {

											API_ = FUNC::TAB[ i ]

											q = FUNC::PARAM[ API_ ]

											if ( q >= 1 && q <=8 )

												if ( q < 5 )

													if ( q < 3 )

														if ( q == 1 )

															P[ i ] = @API_( p )

														else	P[ i ] = @API_( p, p2 )

													else	if ( q == 3 )

															P[ i ] = @API_( p, p2,p3 )

														else	P[ i ] = @API_( p, p2,p3,p4 )

												else	if ( q < 7 )

														if ( q == 5 )

															P[ i ] = @API_( p, p2,p3,p4,p5 )

														else	P[ i ] = @API_( p, p2,p3,p4,p5,p6 )

													else	if ( q == 7 )

															P[ i ] = @API_( p, p2,p3,p4,p5,p6,p7 )

														else	P[ i ] = @API_( p, p2,p3,p4,p5,p6,p7,p8 )

											else

												return api_errbpn( a, q ) }

								break

							case "c":

								while ( ++i <= q )

									if ( ( p = P[ i ] ) in CLASS )

										if ( ( i = p METHODSEP_ a ) in FUNC::TAB ) {

											API_ = FUNC::TAB[ i ]

											q = FUNC::PARAM[ API_ ]

											if ( q >= 1 && q <=8 )

												if ( q < 5 )

													if ( q < 3 )

														if ( q == 1 )

															P[ i ] = @API_( p )

														else	P[ i ] = @API_( p, p2 )

													else	if ( q == 3 )

															P[ i ] = @API_( p, p2,p3 )

														else	P[ i ] = @API_( p, p2,p3,p4 )

												else	if ( q < 7 )

														if ( q == 5 )

															P[ i ] = @API_( p, p2,p3,p4,p5 )

														else	P[ i ] = @API_( p, p2,p3,p4,p5,p6 )

													else	if ( q == 7 )

															P[ i ] = @API_( p, p2,p3,p4,p5,p6,p7 )

														else	P[ i ] = @API_( p, p2,p3,p4,p5,p6,p7,p8 )

											else

												return api_errbpn( a, q ) }

								break

							case "cp":

								while ( ++i <= q ) {

									if ( ( p = P[ i ] ) in CLASS )

										if ( ( i = p METHODSEP_ a ) in FUNC::TAB )

											API_ = FUNC::TAB[ i ]

										else	continue

									else	if ( p in PARENT )

											if ( ( i = PARENT[ p ] METHODSEP_ a ) in FUNC::TAB )

												API_ = FUNC::TAB[ i ]

											else	continue

										else	continue

									API_ = FUNC::TAB[ i ]

									q = FUNC::PARAM[ API_ ]

									if ( q >= 1 && q <=8 )

										if ( q < 5 )

											if ( q < 3 )

												if ( q == 1 )

													P[ i ] = @API_( p )

												else	P[ i ] = @API_( p, p2 )

											else	if ( q == 3 )

													P[ i ] = @API_( p, p2,p3 )

												else	P[ i ] = @API_( p, p2,p3,p4 )

										else	if ( q < 7 )

												if ( q == 5 )

													P[ i ] = @API_( p, p2,p3,p4,p5 )

												else	P[ i ] = @API_( p, p2,p3,p4,p5,p6 )

											else	if ( q == 7 )

													P[ i ] = @API_( p, p2,p3,p4,p5,p6,p7 )

												else	P[ i ] = @API_( p, p2,p3,p4,p5,p6,p7,p8 )

									else

										return api_errbpn( a, q ) }

								break

							default:

								return api_errbat( a, tr ) }

					else	break  } while ( ( p != p = retab( P, D ) ) && tp ) }

			else

				return api_err( "bad pointer: @2, @3", a, p, p2 )

			return p }

		else

			return api_err( "undefined method: @1", a ) }

	#_____________________________

	func	api_errbat( a, t ) {

		return api_err( "bad target: @2", a, t ) }

	#_____________________________

	func	api_errbpn( a, q ) {

		return api_err( "bad paraam num set: @2", a, q ) }

	#_____________________________

	func	api_err( t, a, p2,p3,p4 ) {

		return error( "api( @1, " t " ) API_: @4", a, p2,p3, API_ ) }

#___________________________________________________________
func	_::parent( p, p2,p3,p4,p5,p6,p7,p8 ,x,r ) { ##########

	# call parent-method
	#
	#	based on the content of the globvar API_
	#_____________________________

	x = API_

	r = parent_0( p, p2,p3,p4,p5,p6,p7,p8 )

	API_ = x

	return r }

	#_____________________________

	func	parent_0( p, p2,p3,p4,p5,p6,p7,p8 ,q ) {

		if ( API_ in _APITAB ) {

			API_ = _APITAB[ API_ ]

			q = FUNC::PARAM[ API_ ]

			if ( q >= 1 && q <=8 )

				if ( q < 5 )

					if ( q < 3 )

						if ( q == 1 )

							return @API_( p )

						else	return @API_( p, p2 )

					else	if ( q == 3 )

							return @API_( p, p2,p3 )

						else	return @API_( p, p2,p3,p4 )

				else	if ( q < 7 )

						if ( q == 5 )

							return @API_( p, p2,p3,p4,p5 )

						else	return @API_( p, p2,p3,p4,p5,p6 )

					else	if ( q == 7 )

							return @API_( p, p2,p3,p4,p5,p6,p7 )

						else	return @API_( p, p2,p3,p4,p5,p6,p7,p8 )

			else

				return parent_err( "bad param num set: @1", q ) } }

		#_______________________

		func	parent_err( t, q, p2,p3,p4 ) {

			return error( "_::parent( " t " )", q, p2,p3,p4 ) }













#_________________________________________________________________
func	librq( n, v ) { ############################################

	if ( ! islib( n ) )

		return error( "class library requires @1 library", n ) }

	#_____________________________

	func	islib( n ) {

		return ( "envmod::" n ) in FUNCTAB }

#_____________________________________________________
func	error( t, p1,p2,p3,p4, e ) { ###################

	if ( t == "" )

		t = "@1"

	ERRNO = message( t, p1,p2,p3,p4 )

	if ( isnull( e ) )

		e = ERROR_OUT

	if ( e ) {

		ERRNO = "fatal: " ERRNO

		ORS = "\x0A"				# ??? EOL???

		print ERRNO >> e

		fflush( e )
		
		exit }

	ERRNO = "error: " ERRNO }

	#_______________________

	func	message( t, p1,p2,p3,p4 ) {

		gsub( /@1/, msg_0( p1 ), t )
		gsub( /@2/, msg_0( p2 ), t )
		gsub( /@3/, msg_0( p3 ), t )
		gsub( /@4/, msg_0( p4 ), t )

		gsub( /!/, "", t )

		return t }
		#_________________

		func	msg_0( p ) {

			switch ( typeof( p ) ) {

				case "untyped":

					return "-"

				case "array":

					return "A[]"

				case "undefined":

					return "-"

				default:

					return p "" } }

#_____________________________________________________
func	typeof( p ) { ##################################

	return awk::typeof( p ) }

#_______________________________________________
func	patsplit( t, A, r, B ) { #################

	return awk::patsplit( t, A, r, B ) }

#_____________________________________________________
func	movaa( D, S ) { ################################

	return mov::aa( D, S ) }

#_______________________________________________
func	defia( i, A ) { ##########################

	return def::ia( i, A ) }

#_______________________________________________
func	letia( i, A ) { ##########################

	return let::ia( i, A ) }

#_____________________________________________________
func	retab( A, B, a,q,sa ) { ########################

	return ret::ab( A, B, a,q,sa ) }

#_____________________________________________________
func	isapi( p, a ) { ################################

	return _::req( p, a ) }

#_______________________________________________
func	uid( pp ) { ##############################

	return uid::get( pp ) }

#_______________________________________________
func	hid( n, c ) { ############################

	return hid::get( n, c ) }

#_____________________________________________________
func	and( a, b ) { ##################################

	return awk::and( a, b ) }

#_____________________________________________________
func	isnull( p ) { ##################################

	switch ( typeof( p ) ) {

		case "array":

			return

		case "untyped":

		case "undefined":

			return "U" } }

#_______________________________________________
func	_default( v, dv, dv2 ) { #################

	if ( isnull( v ) )

		if ( isnull( dv ) )

			return dv2

		else

			return dv

	return v }

#_________________________________________________________________
##################################################################


