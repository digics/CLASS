

	@include	"D:/CPU/DEV/PROJECT/ENV/awk/mod/arr/_/ARR10/arr.lib"

	@include	"D:/CPU/DEV/PROJECT/ENV/awk/mod/uid/_/UID10/uid.lib"

	@include	"D:/CPU/DEV/PROJECT/ENV/awk/mod/str/_/STR10/str.lib"


	@include	"D:/CPU/DEV/PROJECT/ENV/awk/mod/class/_/CLASS10/class.lib"

#	@include	"D:/CPU/DEV/PROJECT/ENV/awk/mod/class/_/CLASS10/xclass.lib"


#	@include	"D:/CPU/DEV/PROJECT/ENV/awk/mod/class/_/CLASS10/tempFile.class"


#	@include	"D:/CPU/DEV/PROJECT/ENV/awk/mod/class/_/CLASS10/Name.class"













#____________________________________________________________________
#####################################################################


@namespace "lev1"

BEGIN{


	ptr = _::class( "lev1" )

	}

func	__new( pp, p ) {

	print "lev1: new: in"

	p = _::parent( pp, p )

	print "lev1: new: out"


	return p }


func	__w( p, t ) {

	print "lev1: w: in: " t "'"

	_::parent( p, t )

	print "lev1: w: out"



	MAC[ p ] = t

	MACSP[ p ] = 1

	return p }


func	__class( n, pp, px, D ,p ) {

	print "lev1::class( " n ", " pp ", " px ",D ): in"

	p = _::parent( n, pp, px, D )

	print "lev1::class( ): out"

	return p }

#____________________________________________________________________
#####################################################################

@namespace "lev2"

BEGIN{

	ptr = _::class( "lev2", lev1::ptr )

	}


func	init0( p ) {

	print "lev2 init0: in"


	_::method( "w	ptr		, data, D,P,G,X,Y	" )

	_::method( "aj	ptr					" )



	print "lev2 init0: out"

	}



func	__new( pp, p ) {

	print "lev2: new: in"

	p = _::parent( pp, p )

	print "lev2: new: out"


	return p }



func	__w( p, t, D,P,G,X,Y ) {

	print "lev2: w: in"

	_::parent( p, t )

	print "lev2: w: out"

	return p }






func	__aj( p ) {

	print "lev2: aj: in"

	_::parent( p, t )

	print "lev2: aj: out"

	return p }




func	_::aj( p, D,P,G,X,Y ) {

	return _::api( "aj", p, D,P,G,X,Y ) }


















#____________________________________________________________________
#####################################################################

	@namespace "awk"

func	new( i ) {


	r = _::new( SYMTAB[ i ] )

	t = i " = " r "'"

	return t "\x0A" }

func	write( i, t ) {

	r = _::w( SYMTAB[ i ], t )

	t = i " = " r "'"

	return t "\x0A" }

func	aj( p, D,P,G,X,Y ) {

	return _::aj( p, D,P,G,X,Y ) }



BEGIN{

	print; print; print


	print "p1: " ( p1 = new( "lev1::ptr" ) ) "'"

	print "p2: " ( p2 = new( "lev2::ptr" ) ) "'"





	#print "lev1::p1 = " ( lev1::p1 = _::new( SYMTAB[ i lev1::ptr ) ) "'"; print

	print write( "lev1::ptr", "lev1data" )

	print write( "lev2::ptr", "lev2data" )



	print; print; print

	print dumpa( class::_APITARGET )
	print dumpa( class::_APITYPE )
	print dumpa( class::_API )

	print dumpa( class::_APITAB )

	print dumpa( FUNC::PARAM )

	print dumpa( class::_CLASSES )


#	print dumpa( FUNC::TAB, "~(_w|_new)$" )

	print; print; print









	exit


	print 

	p1 = _::new( "" )

	print "ptr1: " p1 "'"
















	exit



	print

	p1 = _::new( "" )

	print "ptr1: " p1 "'"

	print

	p2 = _::new( tempFile::ptr )

	print "ptr2: " p2 "'"

	print

	p3 = _::new( Name::ptr )

	print "ptr3: " p3 "'"



	print "huj!!"



	p4 = _::def( "huj", "" )

	print "p4 parent: " p4 "'"


	

	p5 = _::new( p4 )

	print "p5: " p5 "'"

	print

	t = "[" tempFile::ptr "]"

	t = t t t t

	print "before\t" t "'"

	tt = _::new( t )

	print "after\t" tt "'"

	print

	pp = _::w( Name::ptr, "huj" )

	print "Name::ptr = " pp "'"

	print

	t = pp

	pp = _::w( Name::ptr, "pizda" )

	t = t " " pp

	print "before\t'" t "'"

	#print "DEL: " _::del( t ) "'"

	

	print "R: " ( tt = _::r( t ) ) "'"

	print

	print dump::a( FUNC::PARAM )

	print

	print dump::a( class::_APITAB )

	print


	print "copy: " ( ttt = _::dup( t ) ) "'"

	print

	print "read: " _::r( ttt ) "'"

	print




 }


# replace BASEPTR object


BEGIN{

	print
	print
	print
	print
	print
	print




	print
	print






 }










#_________________________________________________________________
func	reta( A ) { ################################################

	return ret::a( A ) }

#___________________________________________________________
func	retad( A, sa, q, i ) { ###############################

	retuirn ret::ad( A, sa, q, i ) }

#___________________________________________________________
func	retas( A, t ) { ######################################

	retuirn ret::as( A, t ) }

#___________________________________________________________
func	retab( A, B ) { ######################################

	return ret::ab( A, B ) }


func	dumpa( A, n ) {

	return dump::a( A, n ) }







